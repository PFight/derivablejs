(:module havelock
  "Havelock is an holistic state management library. This is its API documentation.
  "

  (:interface (Derivable T)
    "A thing that is derivable"
    ((derive E) [f (=> [value T] E)] (Derivable E)
      "Creates a new derivation based on the application of `f` to the
      current value of this derivable. e.g.

      ```javascript
      const x = atom(4);
      const timesTwo = (n) => n * 2;
      const xTimesTwo = x.derive(timesTwo);

      xTimesTwo.get();
      // => 8
      ```")

    (reaction [r (Reaction T)] (Reaction T)
      "Creates a link between `r` and this derivable. `r` should be a 'fresh'
      reaction. i.e. it should not have been linked to any other derivable
      in the past. For examples see {{Reaction}}")

    (reaction [f (=> [value T] void)] (Reaction T)
      "Creates a new reaction based on `f` being applied to this derivable. e.g.

      ```javascript
      const x = atom(4);
      const r = x.reaction(x => console.log(`x is`, x));

      x.set(8);

      // .reaction creats the reaction, but doesn't start it,
      // so nothing gets printed yet

      r.start();

      // now that the reaction has started it will respond
      // to changes in x

      x.set(16);
      // $> x is 16

      x.set(32);
      // $> x is 32
      ```")

    (react [r (Reaction T)] (Reaction T)
      "Creates a link between the given reaction and this derivable. Starts
      and forces the reaction before returning it. i.e.

      ```javascript
      derivable.react(r);
      ```

      is equivalent to

      ```javascript
      derivable.reaction(r).start().force();
      ```")

    (react [f (=> [value T] void)] (Reaction T)
      "Creates a new reaction based on `f` being applied to this derivable.
      Starts and forces the reaction before returning it. i.e.

      ```javascript
      derivable.react(f);
      ```

      is equivalent to

      ```javascript
      derivable.reaction(f).start().force();
      ```")

    (get [] T
      "Returns the current value of this derivable.

      ```javascript
      const x = atom(`a string`);
      x.get();
      // => 'a string'
      ```")

    (is [other any] (Derivable boolean)
      "Returns a derivable which represents the equality of the values held in
      this and `other`.

      ```javascript
      let a = atom(`a`),
          b = atom(`b`);

      let same = a.is(b);

      same.get();
      // => false

      b.set(`a`);

      same.get();
      // => true
      ```
      ")

    (and [other any] (Derivable any)
      "Returns a derivable which represents the boolean AND composition of the
      values held in this and `other`.

      ```javascript
      const condition = atom(`truthy value`);

      const result = condition.and(`yes truthy`);

      result.get();
      // => `yes truthy`

      condition.set(false);

      result.get();
      // => false
      ```

      `other` can be a derivable.

      ```javascript
      const result2 = result.and(condition.derive(s => s.split(` `)[0]));

      result2.get();
      // => false

      condition.set(`some string`);

      result2.get();
      // => `some`
      ```

      Due to havelock's laziness, we can be sure that the derivation of
      `condition` (the string splitting bit) will only ever be evaluated
      when `condition` contains a truthy value.")

    (or [other any] (Derivable any)
      "Returns a derivable which represents the boolean OR composition of the
      values held in this and `other`.

      ```javascript
      const first = atom(`truthy value`);
      const second = atom(false);

      first.or(second).get();
      // => `truthy value`

      second.or(first).get();
      // => `truthy value`

      first.set(false);

      second.or(first).get();
      // => false

      first.set(`first`);
      second.set(`second`);

      first.or(second).get();
      // => `first`

      second.or(first).get();
      // => `second`
      ```")

    (then [thenD any, elseD any] (Derivable any)
      "Returns a derivable which represents the value of `thenD` if this is
      truthy, or `elseD` otherwise.

      Equivalent to:

      ```javascript
      this.and(thenD).or(elseD);
      ```")

    (not [] (Derivable boolean)
      "Returns a derivable which represents the boolean complement of the
      truthiness of the the value represented by this.

      Equivalent to:

      ```javascript
      this.derive(x => !x);
      ```")

    (switch [&args [any]] (Derivable any)
      "Args is a flat list of (comparatee, value) pairs. If the value
      represented by this derivable is equal to a comparatee (which can be derivable or not),
      a derivable representing the comparatee's corresponding value is returned. If none match,
      the value represented is `undefined` unless a trailing value is supplied.

      ```javascript
      const x = atom(3);

      const y = x.switch(
        1, `one`,
        2, `two`,
        3, `three`
      );

      y.get();
      // => `three`

      x.set(4);

      y.get();
      // => undefined

      const z = x.switch(
        5, `five`,
        6, `six`,
        `other`
      );

      z.get();
      // => `other`
      ```"))

  (:interface (Atom T)
    "Represents a mutable reference. "
    (:extends (Derivable T))
    ((set E) [value E] (Atom E)
      "Sets the value of this atom to be `value`, returns this atom")
    ((swap E) [f (=> [value T &args [any]] E), &args [any]] (Atom E)
      "Sets the value of this atom to be the value returned when `f` is applied
      to the current value of this and `args`.

      Equivalent to:

      ```javascript
      this.set(f.apply(null, [this.get()].concat(args)));
      ```")
    ((lens E) [lens (Lens T E)] (Atom E)
      "Returns a new Atom connected to this one via the logic encapsulated by
      the `lens` parameter. See {{Lens}}."))

  (:interface (Lens ParentType ChildType)
    "The value returned from {{Atom::lens}} is a *lensed* atom. A lens is a kind of cross between an atom and a derivation.
    It acts as a mutable proxy for some base atom, which lets consumers modify
    the base atom without knowing precisely how. This knowledge is encoded in a
    `Lens` as {{get}} and {{set}} functions.

    For example, you could (but probably shouldn't) store your entire
    application state as a json string, e.g.

    ```javascript
    const jsonState = atom(JSON.stringify({
      username: `Tigran`,
      sessionID: `x3rfs`
    }));
    ```

    and then use you could use a generic lens to access and mutate properties
    within that string:

    ```javascript
    function jsonLens (prop) {
      return {
        get (json) {
          return JSON.parse(json)[prop];
        },
        set (json, value) {
          let state = JSON.parse(json);
          state[prop] = value;
          return JSON.stringify(state);
        }
      }
    }

    const username = jsonState.lens(jsonLens(`username`));

    username.get();
    // => `Tigran`

    username.set(`Franny`);

    jsonState.get();
    // => `{\"username\": \"Franny\", \"sessionID\": \"x3rfs\"}`

    username.get();
    // => `Franny`
    ```

    If someone has the `username` atom, they can be completely oblivious to the
    fact that it is an abstraction over a json string, treating it like a normal
    atom. This is the power of lenses!

    But lenses also *compose*!

    For example, if we were passing `username` to someone who can only read
    backwards, we could do something like:

    ```javascript
    function stringReverse (s) {
      let result = ``;
      for (let c of s) {
        result = c + result;
      }
      return result;
    }
    const reverseLens = {
      get: s => stringReverse(s),
      set: (_, s) => stringReverse(s)
    };

    const emanresu = username.lens(reverseLens);

    emanresu.get();
    // => `ynnarF`

    emanresu.set(`drahciR`);

    jsonState.get();
    // => `{\"username\": \"Richard\", \"sessionID\": \"x3rfs\"}`
    ```

    Now the poor soul who can only read backwards doesn't ever have to think
    about reversing strings ever again.
    "
    (get [source ParentType] ChildType
      "Returns the lensed value extracted from `source`.")
    (set [source ParentType, value ChildType] ParentType
      "Returns the transformed version of `source` which includes `value`."))

  (:class (Reaction T)
    "A Reaction is a stateful object which can be attached to a particular
    derivable. Changes in this derivable will cause a Reaction to be executed."
    (:constructor [])
    (start [] (Reaction T)
      "Starts this reaction. After this is called, any changes in the derivable
      to which the reaction is attached will cause the reaction's .{{react}}
      method to be called.

      Calls the {{onStart}} method if defined.")
    (stop [] (Reaction T)
      "Stops this reaction. Changes in the attached derivable will no longer
      cause reaction.

      Calls the {{onStop}} method if defined.")
    (force [] (Reaction T)
      "Forces reaction.")
    (react [value T] void
      "*Abstract. Required.*

      This method is responsible for carrying out reactive side-effects based
      on `value`.")
    (onStart [] void
      (:note "*Abstract*")
      "Called when the reaction is started. Use for acquiring resources.")
    (onStop [] void
      (:note "*Abstract*")
      "Called when the reaction is stopped. Use for releasing resources."
      (:see-also stop start))
    )

  ((atom T) [value T] (Atom T)
    "Returns a new {{Atom}} containing {{value}}: {{T}}.

    ```javascript
    const myAtom = atom(`a string`);

    myAtom.get();
    // => `a string`
    ```")

  ((derive T) [f (=> [] T)] (Derivable T)
    "Returns a new derivable encapsulating the result returned by `f` which
    should be pure aside from dereferencing one or more {{Derivable}}s.

    ```javascript
    const x = atom(1),
          y = atom(2);

    const z = derive(() => x.get() + y.get());

    z.get();
    // => 3

    x.set(2);
    z.get();
    // => 4

    ```")

  (isAtom [obj any] boolean
    "Returns true iff `obj` is an {{Atom}}.")

  (isDerivable [obj any] boolean
    "Returns true iff `obj` is a {{Derivable}}.")

  (isDerivation [obj any] boolean
    "Returns true iff `obj` is a derivation,
    i.e. a derivable which is not an atom.")

  (isLensed [obj any] boolean
    "Returns true iff {{obj}} is a *lensed* atom."
    (:see-also Lens Atom::lens))

  (isReaction [obj any] boolean
    "Returns true iff `obj` is a {{Reaction}}.")
  )
