(:module havelock
  "Havelock is an holistic state management library. This is its API documentation.
  "

  (:interface (Derivable T)
    "A thing that is derivable"
    ((derive E) [f (=> [value T] E)] (Derivable E)
      "Creates a new derivation based on the application of f to the
      current value of this derivable")

    (reaction [r (Reaction T)] (Reaction T)
      "Creates a link between the given reaction and this derivable.")

    (reaction [f (=> [value T] void)] (Reaction T)
      "Creates a new reaction based on f being applied to this derivable.")

    (react [r (Reaction T)] (Reaction T)
      "Creates a link between the given reaction and this derivable. Starts
      and forces the reaction before returning it.")

    (react [f (=> [value T] void)] (Reaction T)
      "Creates a new reaction based on f being applied to this derivable.
      Starts and forces the reaction before returning it.")

    (get [] T
      "Returns the current value of this derivable")

    (is [other any] (Derivable boolean)
      "Returns a derivable which represents the equality of the values held in
      this and other.

      e.g.
      ```javascript
      let a = atom(`a`),
          b = atom(`b`);

      let same = a.is(b);

      same.get();
      // => false

      b.set(`a`);

      same.get();
      // => true
      ```
      ")

    (and [other any] (Derivable any)
      "")

    (or [other any] (Derivable any)
      "")

    (then [thenD any, elseD any] (Derivable any)
      "")

    (not [] (Derivable boolean)
      "")

    (switch [&args [any]] (Derivable any)
      ""))

  (:interface (Mutable T)
    "Mutable interface yo see {{Derivable}}"
    ((set E) [value E] (Mutable E)
      "")
    ((swap E) [f (=> [value T &args [any]] E), &args [any]] (Mutable E)
      "")
    ((lens E) [descriptor (LensDescriptor T E)] (Lens E)
      ""))

  (:interface (LensDescriptor ParentType ChildType)
    "Lens Descriptors are some whack jazz"
    (get [source ParentType] ChildType
      "")
    (set [source ParentType, value ChildType] ParentType
      ""))

  (:interface (Atom T)
    "blub"
    (:extends (Derivable T) (Mutable T)))

  (:interface (Reaction T)
    "blub"
    (start [] (Reaction T)
      "")
    (stop [] (Reaction T)
      "")
    (force [] (Reaction T)
      "")))
